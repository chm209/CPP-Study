#include<iostream>
void ex01(void);
void ex02(void);
void ex03(void);
void ex04(void);
void ex05(void);

int main(void)
{
	ex01();
	ex02();
	ex03();
	ex04();
	ex05();
}

void ex01(void)
{
	/*
	*  ◈ 객체와 클래스
	* ※ OOP는 프로그램 설계 방법의 하나이다.
	* 1. 추상화
	* 2. 캡슐화와 데이터 은닉
	* 3. 다형
	* 4. 상속
	* 5. 코드의 재활용
	* 
	* ♠ 추상화와 클래스
	* ※ 정보를 사용자 인터페이스로 표현화는것
	* 
	* ↓ C++의 클래스
	* ※ 추상화를 사용자 정의 데이터형으로 변환해 주는 C++의 수단이다.
	* ※ 클래스는 데이터 표현과 데이터를 조작하는 메서드들을 하나의 패키지 안에 결합한다.
	* ※ 클래스 서술은 두 부분으로 이루어진다.
	* 1. 클래스 선언:	데이터 멤버와 public 인터페이스, (메서드라고 부르는) 멤버 함수를 이용하여 데이터 표현을 서술한다.
	* 2. 클래스 메서드 정의: 클래스 멤버 함수가 어떻게 구현 되는지를 서술한다.
	* ※ 클래스 선언은 클래스의 개용를 제공하는것, 메서드 정의는 세부 사항을 제공하는것
	* 인터페이스: 두 시스템 간의 상호 작용을 위한 공통된 프레임워크
	* ↓↓ 접근제어
	* ※ private, public / 클래스 멤버에 대한 접근 제어를 서술한다.
	* 1. 특정 클래스의 객체를 사용하는 프로그램은 그 객체의 public 부분에는 직접 접근할 수 있다.
	* 2. public 멤버 함수를 통해서만 그 객체의 private 멤버에 접근할 수 있다.
	* 3. public 멤버 함수는 객체와 프로그램 사이의 인터페이스를 제공한다.
	* ※ 프로그램이 데이터에 직접 접근하지 못하게 차단하는것을 데이터 은닉이라 한다.
	* ※ 데이터 은닉은 데이터에 직접 접근하지 못하게 막아 줄 뿐만 아니라. 데이터 표현이 어떻게 되어 있는지에 대해 클래스 사용자가 신경쓰지 않도록 해준다.
	* ↓↓ 멤버 접근 제어: public 또는 private
	* 1. 일반적으로 데이터 항목들은 private 부분에 선언된다.
	* 2. 클래스 인터페이스를 구성하는 멤버 함수들은 public 부분에 선언된다.
	* 3. 클래스 객체에 대한 디폴트 접근 제어가 private로 지정되어 있기 때문에 클래스 선언에서 키워드 private는 없어도 된다.
	* 
	* ↓ 클래스 멤버 함수의 구현
	* ※
	* 
	*/
}

void ex02(void)
{

}

void ex03(void)
{

}

void ex04(void)
{

}

void ex05(void)
{

}